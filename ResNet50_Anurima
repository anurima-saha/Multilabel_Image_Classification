{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOmVw9LGU0gKm75R2vc2okS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# TRAINING RESNET50 FOR MULTI-LABEL CLASSIFICATION\n"],"metadata":{"id":"qoqtHtS4ekuY"}},{"cell_type":"markdown","source":["#### Connecting to drive"],"metadata":{"id":"ANQkIlfJe4u7"}},{"cell_type":"code","source":["# Connect to google drive\n","from google.colab import drive\n","drive.mount('/content/drive/')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DRDLBBWblrGF","executionInfo":{"status":"ok","timestamp":1731953464792,"user_tz":480,"elapsed":19442,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"072764c2-cabe-42d2-997e-050b4b8c6ce1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}]},{"cell_type":"code","source":["# Adding your absolute path of your project folder to system path\n","import sys\n","sys.path.append(\"/content/drive/My Drive/CS 553/Project/Data/Multi_Label_dataset\")"],"metadata":{"id":"omJuU-Q2lsM8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%cd \"/content/drive/My Drive/CS 553/Project/Data/Multi_Label_dataset\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E94Mlr62lsQs","executionInfo":{"status":"ok","timestamp":1731953486704,"user_tz":480,"elapsed":867,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"6c003194-e84b-4685-9459-5f0173180445"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/CS 553/Project/Data/Multi_Label_dataset\n"]}]},{"cell_type":"code","source":["# Checking status of gpu available through google collab\n","!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yp4Qkm1znhmX","executionInfo":{"status":"ok","timestamp":1731953489161,"user_tz":480,"elapsed":481,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"8b8ce305-a661-4fa5-f046-73027dfc05f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mon Nov 18 18:11:28 2024       \n","+---------------------------------------------------------------------------------------+\n","| NVIDIA-SMI 535.104.05             Driver Version: 535.104.05   CUDA Version: 12.2     |\n","|-----------------------------------------+----------------------+----------------------+\n","| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n","|                                         |                      |               MIG M. |\n","|=========================================+======================+======================|\n","|   0  Tesla T4                       Off | 00000000:00:04.0 Off |                    0 |\n","| N/A   45C    P8               9W /  70W |      0MiB / 15360MiB |      0%      Default |\n","|                                         |                      |                  N/A |\n","+-----------------------------------------+----------------------+----------------------+\n","                                                                                         \n","+---------------------------------------------------------------------------------------+\n","| Processes:                                                                            |\n","|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n","|        ID   ID                                                             Usage      |\n","|=======================================================================================|\n","|  No running processes found                                                           |\n","+---------------------------------------------------------------------------------------+\n"]}]},{"cell_type":"markdown","source":["!pip install --upgrade --force-reinstall torch torchvision torchaudio\n","!pip install numpy --upgrade --force-reinstall"],"metadata":{"id":"oflN1Yd7BD-o"}},{"cell_type":"markdown","source":["#### Loading Data and Spliting in Train,Validation and Test"],"metadata":{"id":"OjCz308Iq78Q"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"d42C3sjYlSnu"},"outputs":[],"source":["import cv2\n","import numpy as np\n","import torch\n","import torchvision.transforms as transforms\n","from torch.utils.data import Dataset\n","from PIL import Image\n","import warnings\n","from sklearn.exceptions import UndefinedMetricWarning\n","\n","warnings.filterwarnings(\"ignore\", category=UndefinedMetricWarning)\n","\n","class ImageDataset(Dataset):\n","    def __init__(self, csv, train, test):\n","        self.csv = csv\n","        self.train = train\n","        self.test = test\n","        #Image id from csv file\n","        self.all_image_names = self.csv[:]['Id']\n","        #labels from train csv file\n","        self.all_labels = np.array(self.csv.drop(['Id', 'Genre'], axis=1))\n","        #Train-Validation data split (85% train and 15% validation)\n","        self.train_ratio = int(0.85 * len(self.csv))\n","        self.valid_ratio = len(self.csv) - self.train_ratio\n","        #set the training data images and labels\n","        if self.train == True:\n","            print(f\"Number of training images: {self.train_ratio}\")\n","            self.image_names = list(self.all_image_names[:self.train_ratio])\n","            self.labels = list(self.all_labels[:self.train_ratio])\n","            # define the training transforms - data augmentation\n","            self.transform = transforms.Compose([\n","                transforms.ToPILImage(),\n","                transforms.Resize((224, 224)),\n","                transforms.RandomHorizontalFlip(p=0.5),\n","                transforms.RandomRotation(degrees=45),\n","                transforms.ToTensor(),\n","                transforms.Normalize(            # Normalize the tensor\n","                          mean=[0.5, 0.5, 0.5],  # Using ImageNet mean and std\n","                          std=[0.5, 0.5, 0.5]\n","                          )\n","            ])\n","        # set the validation data images and labels\n","        elif self.train == False and self.test == False:\n","            print(f\"Number of validation images: {self.valid_ratio}\")\n","            self.image_names = list(self.all_image_names[-self.valid_ratio:-10])\n","            self.labels = list(self.all_labels[-self.valid_ratio:-10])\n","            # define the validation transforms\n","            self.transform = transforms.Compose([\n","                transforms.ToPILImage(),\n","                transforms.Resize((224, 224)),\n","                transforms.ToTensor(),\n","            ])\n","        # set the test data images and label (last 10 images)\n","        elif self.test == True and self.train == False:\n","            self.image_names = list(self.all_image_names[-10:])\n","            self.labels = list(self.all_labels[-10:])\n","             # define the test transforms\n","            self.transform = transforms.Compose([\n","                transforms.ToPILImage(),\n","                transforms.ToTensor(),\n","            ])\n","    def __len__(self):\n","        return len(self.image_names)\n","\n","    def __getitem__(self, index):\n","        image = cv2.imread(f\"Images/{self.image_names[index]}.jpg\")\n","        # convert the image from BGR to RGB color format\n","        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","        # apply image transforms\n","        image = self.transform(image)\n","        targets = self.labels[index]\n","\n","        return {\n","            'image':image.clone().detach() if isinstance(image, torch.Tensor) else torch.tensor(image, dtype=torch.float32),\n","            'label': torch.tensor(targets, dtype=torch.float32)\n","        }"]},{"cell_type":"markdown","source":["#### Evaluation Metrics"],"metadata":{"id":"N-0WCFWFsB1z"}},{"cell_type":"code","source":["from sklearn.metrics import average_precision_score,roc_auc_score\n","def compute_mAP(outputs,labels):\n","    y_true = labels.cpu().detach().numpy()\n","    y_pred = outputs.cpu().detach().numpy()\n","    AP = []\n","    for i in range(y_true.shape[0]):\n","        AP.append(average_precision_score(y_true[i],y_pred[i]))\n","    return np.mean(AP)\n","\n","def comput_roc(outputs,labels):\n","    y_true = labels.cpu().detach().numpy()\n","    y_pred = outputs.cpu().detach().numpy()\n","    ROC = []\n","    for i in range(y_true.shape[0]):\n","        ROC.append(roc_auc_score(y_true[i],y_pred[i]))\n","    return np.mean(ROC)"],"metadata":{"id":"bgEjyIfMr-tn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import precision_score,recall_score,f1_score\n","def calculate_metrics(pred, target, threshold=0.5):\n","    pred = np.array(pred > threshold, dtype=float)\n","    return {'micro/precision': precision_score(y_true=target, y_pred=pred, average='micro'),\n","            'micro/recall': recall_score(y_true=target, y_pred=pred, average='micro'),\n","            'micro/f1': f1_score(y_true=target, y_pred=pred, average='micro',zero_division=0),\n","            'macro/precision': precision_score(y_true=target, y_pred=pred, average='macro'),\n","            'macro/recall': recall_score(y_true=target, y_pred=pred, average='macro'),\n","            'macro/f1': f1_score(y_true=target, y_pred=pred, average='macro',zero_division=0),\n","            'samples/precision': precision_score(y_true=target, y_pred=pred, average='samples'),\n","            'samples/recall': recall_score(y_true=target, y_pred=pred, average='samples'),\n","            'samples/f1': f1_score(y_true=target, y_pred=pred, average='samples',zero_division=0)\n","            }"],"metadata":{"id":"SwOWX5TysJPu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Creating Train Function"],"metadata":{"id":"L4FtAXLcrDi7"}},{"cell_type":"code","source":["from tqdm import tqdm\n","# training function\n","def train(model, dataloader, optimizer, criterion, train_data, device):\n","    print('Training')\n","    model.train()\n","    counter = 0\n","    train_running_loss = 0.0\n","    train_running_mAP = 0.0\n","    train_running_ROC = 0.0\n","    train_running_mAP = 0.0\n","    train_running_ROC = 0.0\n","    for i, data in tqdm(enumerate(dataloader), total=int(len(train_data)/dataloader.batch_size)):\n","        counter += 1\n","        data, target = data['image'].to(device), data['label'].to(device)\n","        #setting gradients to zero\n","        optimizer.zero_grad()\n","        #forward pass\n","        outputs = model(data)\n","        # apply sigmoid activation to get all the outputs between 0 and 1\n","        outputs = torch.sigmoid(outputs)\n","        loss = criterion(outputs, target)\n","        train_running_loss += loss.item()\n","        train_running_mAP += compute_mAP(outputs,target)\n","        train_running_ROC += comput_roc(outputs,target)\n","        # backpropagation\n","        loss.backward()\n","        # update optimizer parameters\n","        optimizer.step()\n","\n","    train_loss = train_running_loss / counter\n","    train_mAP = train_running_mAP/counter\n","    train_ROC = train_running_ROC/counter\n","    print(f\"Train mAP: {train_mAP:.4f}\")\n","    print(f'Train ROC: {train_ROC:.4f}')\n","    return train_loss,train_mAP,train_ROC\n"],"metadata":{"id":"cglvJ9IhlbIn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### Creating Validation Function"],"metadata":{"id":"HCShy3W5zNv4"}},{"cell_type":"code","source":["def validate(model, dataloader, criterion, val_data, device):\n","    print('Validating')\n","    model.eval()\n","    counter = 0\n","    val_running_loss = 0.0\n","    val_running_mAP = 0.0\n","    val_running_ROC = 0.0\n","    with torch.no_grad():\n","        model_result = []\n","        targets = []\n","        for i, data in tqdm(enumerate(dataloader), total=int(len(val_data)/dataloader.batch_size)):\n","            counter += 1\n","            data, target = data['image'].to(device), data['label'].to(device)\n","            outputs = model(data)\n","            outputs = torch.sigmoid(outputs)\n","            loss = criterion(outputs, target)\n","            model_result.extend(outputs.cpu().numpy())\n","            targets.extend(target.cpu().numpy())\n","            val_running_mAP += compute_mAP(outputs,target)\n","            val_running_ROC += comput_roc(outputs,target)\n","            val_running_loss += loss.item()\n","        result = calculate_metrics(np.array(model_result), np.array(targets))\n","        val_loss = val_running_loss / counter\n","        val_mAP = val_running_mAP/counter\n","        val_ROC = val_running_ROC/counter\n","        print(\"epoch:{:2d}  test: \"\n","                  \"micro f1: {:.3f} \"\n","                  \"macro f1: {:.3f} \"\n","                  \"samples f1: {:.3f}\".format(epoch,\n","                                              result['micro/f1'],\n","                                              result['macro/f1'],\n","                                              result['samples/f1']))\n","        print(f\"Val mAP: {val_mAP:.4f}\")\n","        print(f'Val ROC: {val_ROC:.4f}')\n","        return val_loss,val_mAP,val_ROC"],"metadata":{"id":"aEHSIjVsttPq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#ResNet MODEL"],"metadata":{"id":"i4tcPX55rHux"}},{"cell_type":"code","source":["from torchvision import models as models\n","import torch.nn as nn\n","def create_model(pretrained, requires_grad):\n","    model = models.resnet50(progress=True)\n","    # to freeze the hidden layers\n","    if requires_grad == False:\n","        for param in model.parameters():\n","            param.requires_grad = False\n","    # to train the hidden layers\n","    elif requires_grad == True:\n","        for param in model.parameters():\n","            param.requires_grad = True\n","    # make the classification layer learnable\n","    # we have 25 classes in total\n","    model.fc = nn.Linear(2048, 25)\n","    return model"],"metadata":{"id":"oI_Z3fXglbLd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#TRAINING"],"metadata":{"id":"ZHH8F8OEsLcO"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import pandas as pd\n","import matplotlib\n","import matplotlib.pyplot as plt\n","from torch.utils.data import DataLoader\n","matplotlib.style.use('ggplot')\n","# initialize the computation device\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"],"metadata":{"id":"urTEAH70p7Iq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#intialize the model\n","# Create a ResNet50 model with frozen layers\n","model = create_model(pretrained=True, requires_grad=False).to(device)"],"metadata":{"id":"OqfEWrsyqKtD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["############ Traning for 4 epochs ############\n","#parameters\n","lr = 0.001\n","epochs = 4\n","batch_size = 256\n","optimizer = optim.Adam(model.parameters(), lr=lr)\n","criterion = nn.BCELoss()\n","\n","# read the training csv file\n","train_csv = pd.read_csv('train.csv')\n","\n","# train dataset\n","train_data = ImageDataset(\n","    train_csv, train=True, test=False\n",")\n","# validation dataset\n","valid_data = ImageDataset(\n","    train_csv, train=False, test=False\n",")\n","# train data loader\n","train_loader = DataLoader(\n","    train_data,\n","    batch_size=batch_size,\n","    shuffle=True\n",")\n","# validation data loader\n","valid_loader = DataLoader(\n","    valid_data,\n","    batch_size=batch_size,\n","    shuffle=False\n",")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UCaMjaZQlbPh","executionInfo":{"status":"ok","timestamp":1731956100980,"user_tz":480,"elapsed":169,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"f43c4ccf-45cf-4e85-a6b4-7e61c678bd24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of training images: 6165\n","Number of validation images: 1089\n"]}]},{"cell_type":"code","source":["!pip install torchinfo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2rCztL3OuoNe","executionInfo":{"status":"ok","timestamp":1731711192214,"user_tz":480,"elapsed":3510,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"a97337f7-c7aa-4a2e-bd8b-9a6890a9c42d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting torchinfo\n","  Downloading torchinfo-1.8.0-py3-none-any.whl.metadata (21 kB)\n","Downloading torchinfo-1.8.0-py3-none-any.whl (23 kB)\n","Installing collected packages: torchinfo\n","Successfully installed torchinfo-1.8.0\n"]}]},{"cell_type":"code","source":["import torchinfo\n","from torchinfo import summary\n","\n","\n","# Print a summary using torchinfo (uncomment for actual output)\n","summary(model=model,\n","        input_size=(batch_size, 3, 224, 224), # (batch_size, color_channels, height, width)\n","        col_names=[\"input_size\"], # uncomment for smaller output\n","        #col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n","        col_width=20,\n","        row_settings=[\"var_names\"]\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"EKoDEHDNuMpS","executionInfo":{"status":"ok","timestamp":1731711199173,"user_tz":480,"elapsed":5369,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"3db773c4-d3ec-4004-9b54-080847396c39"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["============================================================\n","Layer (type (var_name))                  Input Shape\n","============================================================\n","ResNet (ResNet)                          [256, 3, 400, 400]\n","├─Conv2d (conv1)                         [256, 3, 400, 400]\n","├─BatchNorm2d (bn1)                      [256, 64, 200, 200]\n","├─ReLU (relu)                            [256, 64, 200, 200]\n","├─MaxPool2d (maxpool)                    [256, 64, 200, 200]\n","├─Sequential (layer1)                    [256, 64, 100, 100]\n","│    └─Bottleneck (0)                    [256, 64, 100, 100]\n","│    │    └─Conv2d (conv1)               [256, 64, 100, 100]\n","│    │    └─BatchNorm2d (bn1)            [256, 64, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 64, 100, 100]\n","│    │    └─Conv2d (conv2)               [256, 64, 100, 100]\n","│    │    └─BatchNorm2d (bn2)            [256, 64, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 64, 100, 100]\n","│    │    └─Conv2d (conv3)               [256, 64, 100, 100]\n","│    │    └─BatchNorm2d (bn3)            [256, 256, 100, 100]\n","│    │    └─Sequential (downsample)      [256, 64, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 256, 100, 100]\n","│    └─Bottleneck (1)                    [256, 256, 100, 100]\n","│    │    └─Conv2d (conv1)               [256, 256, 100, 100]\n","│    │    └─BatchNorm2d (bn1)            [256, 64, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 64, 100, 100]\n","│    │    └─Conv2d (conv2)               [256, 64, 100, 100]\n","│    │    └─BatchNorm2d (bn2)            [256, 64, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 64, 100, 100]\n","│    │    └─Conv2d (conv3)               [256, 64, 100, 100]\n","│    │    └─BatchNorm2d (bn3)            [256, 256, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 256, 100, 100]\n","│    └─Bottleneck (2)                    [256, 256, 100, 100]\n","│    │    └─Conv2d (conv1)               [256, 256, 100, 100]\n","│    │    └─BatchNorm2d (bn1)            [256, 64, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 64, 100, 100]\n","│    │    └─Conv2d (conv2)               [256, 64, 100, 100]\n","│    │    └─BatchNorm2d (bn2)            [256, 64, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 64, 100, 100]\n","│    │    └─Conv2d (conv3)               [256, 64, 100, 100]\n","│    │    └─BatchNorm2d (bn3)            [256, 256, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 256, 100, 100]\n","├─Sequential (layer2)                    [256, 256, 100, 100]\n","│    └─Bottleneck (0)                    [256, 256, 100, 100]\n","│    │    └─Conv2d (conv1)               [256, 256, 100, 100]\n","│    │    └─BatchNorm2d (bn1)            [256, 128, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 128, 100, 100]\n","│    │    └─Conv2d (conv2)               [256, 128, 100, 100]\n","│    │    └─BatchNorm2d (bn2)            [256, 128, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 128, 50, 50]\n","│    │    └─Conv2d (conv3)               [256, 128, 50, 50]\n","│    │    └─BatchNorm2d (bn3)            [256, 512, 50, 50]\n","│    │    └─Sequential (downsample)      [256, 256, 100, 100]\n","│    │    └─ReLU (relu)                  [256, 512, 50, 50]\n","│    └─Bottleneck (1)                    [256, 512, 50, 50]\n","│    │    └─Conv2d (conv1)               [256, 512, 50, 50]\n","│    │    └─BatchNorm2d (bn1)            [256, 128, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 128, 50, 50]\n","│    │    └─Conv2d (conv2)               [256, 128, 50, 50]\n","│    │    └─BatchNorm2d (bn2)            [256, 128, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 128, 50, 50]\n","│    │    └─Conv2d (conv3)               [256, 128, 50, 50]\n","│    │    └─BatchNorm2d (bn3)            [256, 512, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 512, 50, 50]\n","│    └─Bottleneck (2)                    [256, 512, 50, 50]\n","│    │    └─Conv2d (conv1)               [256, 512, 50, 50]\n","│    │    └─BatchNorm2d (bn1)            [256, 128, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 128, 50, 50]\n","│    │    └─Conv2d (conv2)               [256, 128, 50, 50]\n","│    │    └─BatchNorm2d (bn2)            [256, 128, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 128, 50, 50]\n","│    │    └─Conv2d (conv3)               [256, 128, 50, 50]\n","│    │    └─BatchNorm2d (bn3)            [256, 512, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 512, 50, 50]\n","│    └─Bottleneck (3)                    [256, 512, 50, 50]\n","│    │    └─Conv2d (conv1)               [256, 512, 50, 50]\n","│    │    └─BatchNorm2d (bn1)            [256, 128, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 128, 50, 50]\n","│    │    └─Conv2d (conv2)               [256, 128, 50, 50]\n","│    │    └─BatchNorm2d (bn2)            [256, 128, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 128, 50, 50]\n","│    │    └─Conv2d (conv3)               [256, 128, 50, 50]\n","│    │    └─BatchNorm2d (bn3)            [256, 512, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 512, 50, 50]\n","├─Sequential (layer3)                    [256, 512, 50, 50]\n","│    └─Bottleneck (0)                    [256, 512, 50, 50]\n","│    │    └─Conv2d (conv1)               [256, 512, 50, 50]\n","│    │    └─BatchNorm2d (bn1)            [256, 256, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 256, 50, 50]\n","│    │    └─Conv2d (conv2)               [256, 256, 50, 50]\n","│    │    └─BatchNorm2d (bn2)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv3)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn3)            [256, 1024, 25, 25]\n","│    │    └─Sequential (downsample)      [256, 512, 50, 50]\n","│    │    └─ReLU (relu)                  [256, 1024, 25, 25]\n","│    └─Bottleneck (1)                    [256, 1024, 25, 25]\n","│    │    └─Conv2d (conv1)               [256, 1024, 25, 25]\n","│    │    └─BatchNorm2d (bn1)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv2)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn2)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv3)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn3)            [256, 1024, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 1024, 25, 25]\n","│    └─Bottleneck (2)                    [256, 1024, 25, 25]\n","│    │    └─Conv2d (conv1)               [256, 1024, 25, 25]\n","│    │    └─BatchNorm2d (bn1)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv2)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn2)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv3)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn3)            [256, 1024, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 1024, 25, 25]\n","│    └─Bottleneck (3)                    [256, 1024, 25, 25]\n","│    │    └─Conv2d (conv1)               [256, 1024, 25, 25]\n","│    │    └─BatchNorm2d (bn1)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv2)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn2)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv3)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn3)            [256, 1024, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 1024, 25, 25]\n","│    └─Bottleneck (4)                    [256, 1024, 25, 25]\n","│    │    └─Conv2d (conv1)               [256, 1024, 25, 25]\n","│    │    └─BatchNorm2d (bn1)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv2)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn2)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv3)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn3)            [256, 1024, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 1024, 25, 25]\n","│    └─Bottleneck (5)                    [256, 1024, 25, 25]\n","│    │    └─Conv2d (conv1)               [256, 1024, 25, 25]\n","│    │    └─BatchNorm2d (bn1)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv2)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn2)            [256, 256, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 256, 25, 25]\n","│    │    └─Conv2d (conv3)               [256, 256, 25, 25]\n","│    │    └─BatchNorm2d (bn3)            [256, 1024, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 1024, 25, 25]\n","├─Sequential (layer4)                    [256, 1024, 25, 25]\n","│    └─Bottleneck (0)                    [256, 1024, 25, 25]\n","│    │    └─Conv2d (conv1)               [256, 1024, 25, 25]\n","│    │    └─BatchNorm2d (bn1)            [256, 512, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 512, 25, 25]\n","│    │    └─Conv2d (conv2)               [256, 512, 25, 25]\n","│    │    └─BatchNorm2d (bn2)            [256, 512, 13, 13]\n","│    │    └─ReLU (relu)                  [256, 512, 13, 13]\n","│    │    └─Conv2d (conv3)               [256, 512, 13, 13]\n","│    │    └─BatchNorm2d (bn3)            [256, 2048, 13, 13]\n","│    │    └─Sequential (downsample)      [256, 1024, 25, 25]\n","│    │    └─ReLU (relu)                  [256, 2048, 13, 13]\n","│    └─Bottleneck (1)                    [256, 2048, 13, 13]\n","│    │    └─Conv2d (conv1)               [256, 2048, 13, 13]\n","│    │    └─BatchNorm2d (bn1)            [256, 512, 13, 13]\n","│    │    └─ReLU (relu)                  [256, 512, 13, 13]\n","│    │    └─Conv2d (conv2)               [256, 512, 13, 13]\n","│    │    └─BatchNorm2d (bn2)            [256, 512, 13, 13]\n","│    │    └─ReLU (relu)                  [256, 512, 13, 13]\n","│    │    └─Conv2d (conv3)               [256, 512, 13, 13]\n","│    │    └─BatchNorm2d (bn3)            [256, 2048, 13, 13]\n","│    │    └─ReLU (relu)                  [256, 2048, 13, 13]\n","│    └─Bottleneck (2)                    [256, 2048, 13, 13]\n","│    │    └─Conv2d (conv1)               [256, 2048, 13, 13]\n","│    │    └─BatchNorm2d (bn1)            [256, 512, 13, 13]\n","│    │    └─ReLU (relu)                  [256, 512, 13, 13]\n","│    │    └─Conv2d (conv2)               [256, 512, 13, 13]\n","│    │    └─BatchNorm2d (bn2)            [256, 512, 13, 13]\n","│    │    └─ReLU (relu)                  [256, 512, 13, 13]\n","│    │    └─Conv2d (conv3)               [256, 512, 13, 13]\n","│    │    └─BatchNorm2d (bn3)            [256, 2048, 13, 13]\n","│    │    └─ReLU (relu)                  [256, 2048, 13, 13]\n","├─AdaptiveAvgPool2d (avgpool)            [256, 2048, 13, 13]\n","├─Linear (fc)                            [256, 2048]\n","============================================================\n","Total params: 23,559,257\n","Trainable params: 51,225\n","Non-trainable params: 23,508,032\n","Total mult-adds (T): 3.38\n","============================================================\n","Input size (MB): 491.52\n","Forward/backward pass size (MB): 145723.80\n","Params size (MB): 94.24\n","Estimated Total Size (MB): 146309.56\n","============================================================"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["##### Training Run 1 - 4 epochs"],"metadata":{"id":"empMj1Gd1ahU"}},{"cell_type":"code","source":["train_loss = []\n","valid_loss = []\n","train_mAP = []\n","train_ROC = []\n","valid_mAP = []\n","valid_ROC = []\n","for epoch in range(epochs):\n","    model.to(device)\n","    print(f\"Epoch {epoch+1} of {epochs}\")\n","    train_epoch_loss,train_epoch_mAP,train_epoch_ROC = train(\n","        model, train_loader, optimizer, criterion, train_data, device\n","    )\n","    valid_epoch_loss,val_epoch_mAP,val_epoch_ROC = validate(\n","        model, valid_loader, criterion, valid_data, device\n","    )\n","    train_loss.append(train_epoch_loss)\n","    valid_loss.append(valid_epoch_loss)\n","    train_mAP.append(train_epoch_mAP)\n","    train_ROC.append(train_epoch_ROC)\n","    valid_mAP.append(val_epoch_mAP)\n","    valid_ROC.append(val_epoch_ROC)\n","    print(f\"Train Loss: {train_epoch_loss:.4f}\")\n","    print(f'Val Loss: {valid_epoch_loss:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sUFj674jurng","outputId":"96597a95-9313-476d-da45-589363a8dbe9","executionInfo":{"status":"ok","timestamp":1731957615221,"user_tz":480,"elapsed":1117908,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}}},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch 1 of 4\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [09:15, 22.22s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5392\n","Train ROC: 0.8221\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [06:41, 80.33s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 0  test: micro f1: 0.193 macro f1: 0.021 samples f1: 0.173\n","Val mAP: 0.4494\n","Val ROC: 0.7664\n","Train Loss: 0.2556\n","Val Loss: 0.2618\n","Epoch 2 of 4\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:45,  6.60s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5604\n","Train ROC: 0.8342\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.98s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 1  test: micro f1: 0.282 macro f1: 0.025 samples f1: 0.288\n","Val mAP: 0.4916\n","Val ROC: 0.7773\n","Train Loss: 0.2427\n","Val Loss: 0.2561\n","Epoch 3 of 4\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:44,  6.56s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5586\n","Train ROC: 0.8331\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.98s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 2  test: micro f1: 0.269 macro f1: 0.024 samples f1: 0.270\n","Val mAP: 0.4826\n","Val ROC: 0.7583\n","Train Loss: 0.2433\n","Val Loss: 0.2607\n","Epoch 4 of 4\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:47,  6.68s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5612\n","Train ROC: 0.8327\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.02s/it]"]},{"output_type":"stream","name":"stdout","text":["epoch: 3  test: micro f1: 0.282 macro f1: 0.025 samples f1: 0.288\n","Val mAP: 0.4719\n","Val ROC: 0.7590\n","Train Loss: 0.2425\n","Val Loss: 0.2592\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["for epoch in range(epochs):\n","    model.to(device)\n","    print(f\"Epoch {epoch+1} of {epochs}\")\n","    train_epoch_loss,train_epoch_mAP,train_epoch_ROC = train(\n","        model, train_loader, optimizer, criterion, train_data, device\n","    )\n","    valid_epoch_loss,val_epoch_mAP,val_epoch_ROC = validate(\n","        model, valid_loader, criterion, valid_data, device\n","    )\n","    train_loss.append(train_epoch_loss)\n","    valid_loss.append(valid_epoch_loss)\n","    train_mAP.append(train_epoch_mAP)\n","    train_ROC.append(train_epoch_ROC)\n","    valid_mAP.append(val_epoch_mAP)\n","    valid_ROC.append(val_epoch_ROC)\n","    print(f\"Train Loss: {train_epoch_loss:.4f}\")\n","    print(f'Val Loss: {valid_epoch_loss:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5xeNKz2vuZMa","executionInfo":{"status":"ok","timestamp":1731958467911,"user_tz":480,"elapsed":737321,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"6e7ac941-e9e0-4681-9c7c-b95cf9d47b00"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1 of 4\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:49,  6.79s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5665\n","Train ROC: 0.8367\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.04s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 0  test: micro f1: 0.066 macro f1: 0.012 samples f1: 0.052\n","Val mAP: 0.4928\n","Val ROC: 0.7785\n","Train Loss: 0.2392\n","Val Loss: 0.2545\n","Epoch 2 of 4\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:51,  6.85s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5713\n","Train ROC: 0.8401\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.10s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 1  test: micro f1: 0.286 macro f1: 0.027 samples f1: 0.291\n","Val mAP: 0.4860\n","Val ROC: 0.7549\n","Train Loss: 0.2402\n","Val Loss: 0.2688\n","Epoch 3 of 4\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:46,  6.64s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5716\n","Train ROC: 0.8352\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.04s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 2  test: micro f1: 0.283 macro f1: 0.025 samples f1: 0.289\n","Val mAP: 0.4938\n","Val ROC: 0.7993\n","Train Loss: 0.2404\n","Val Loss: 0.2574\n","Epoch 4 of 4\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:48,  6.76s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5657\n","Train ROC: 0.8369\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.02s/it]"]},{"output_type":"stream","name":"stdout","text":["epoch: 3  test: micro f1: 0.282 macro f1: 0.025 samples f1: 0.289\n","Val mAP: 0.4918\n","Val ROC: 0.7841\n","Train Loss: 0.2424\n","Val Loss: 0.2581\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["for epoch in range(epochs):\n","    model.to(device)\n","    print(f\"Epoch {epoch+1+8} of {epochs+8}\")\n","    train_epoch_loss,train_epoch_mAP,train_epoch_ROC = train(\n","        model, train_loader, optimizer, criterion, train_data, device\n","    )\n","    valid_epoch_loss,val_epoch_mAP,val_epoch_ROC = validate(\n","        model, valid_loader, criterion, valid_data, device\n","    )\n","    train_loss.append(train_epoch_loss)\n","    valid_loss.append(valid_epoch_loss)\n","    train_mAP.append(train_epoch_mAP)\n","    train_ROC.append(train_epoch_ROC)\n","    valid_mAP.append(val_epoch_mAP)\n","    valid_ROC.append(val_epoch_ROC)\n","    print(f\"Train Loss: {train_epoch_loss:.4f}\")\n","    print(f'Val Loss: {valid_epoch_loss:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YyO3tZxDyHF4","executionInfo":{"status":"ok","timestamp":1731959927841,"user_tz":480,"elapsed":728867,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"5c672d28-ba87-4434-dd58-e7e0825e9c47"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 9 of 12\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:46,  6.65s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5732\n","Train ROC: 0.8412\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.07s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 0  test: micro f1: 0.294 macro f1: 0.031 samples f1: 0.298\n","Val mAP: 0.4935\n","Val ROC: 0.7727\n","Train Loss: 0.2388\n","Val Loss: 0.2599\n","Epoch 10 of 12\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:44,  6.59s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5705\n","Train ROC: 0.8400\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.01s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 1  test: micro f1: 0.290 macro f1: 0.029 samples f1: 0.294\n","Val mAP: 0.4904\n","Val ROC: 0.7852\n","Train Loss: 0.2401\n","Val Loss: 0.2572\n","Epoch 11 of 12\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:45,  6.61s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5684\n","Train ROC: 0.8391\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.04s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 2  test: micro f1: 0.282 macro f1: 0.025 samples f1: 0.288\n","Val mAP: 0.4751\n","Val ROC: 0.7758\n","Train Loss: 0.2407\n","Val Loss: 0.2610\n","Epoch 12 of 12\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:51,  6.85s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5717\n","Train ROC: 0.8408\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.04s/it]"]},{"output_type":"stream","name":"stdout","text":["epoch: 3  test: micro f1: 0.281 macro f1: 0.025 samples f1: 0.287\n","Val mAP: 0.4973\n","Val ROC: 0.7937\n","Train Loss: 0.2393\n","Val Loss: 0.2523\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["torch.save(model,\"Model_2.pt\")"],"metadata":{"id":"zQyGmuP_0F8_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for epoch in range(epochs):\n","    model.to(device)\n","    print(f\"Epoch {epoch+1+12} of {epochs+12}\")\n","    train_epoch_loss,train_epoch_mAP,train_epoch_ROC = train(\n","        model, train_loader, optimizer, criterion, train_data, device\n","    )\n","    valid_epoch_loss,val_epoch_mAP,val_epoch_ROC = validate(\n","        model, valid_loader, criterion, valid_data, device\n","    )\n","    train_loss.append(train_epoch_loss)\n","    valid_loss.append(valid_epoch_loss)\n","    train_mAP.append(train_epoch_mAP)\n","    train_ROC.append(train_epoch_ROC)\n","    valid_mAP.append(val_epoch_mAP)\n","    valid_ROC.append(val_epoch_ROC)\n","    print(f\"Train Loss: {train_epoch_loss:.4f}\")\n","    print(f'Val Loss: {valid_epoch_loss:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B-X1OzvL39z2","executionInfo":{"status":"ok","timestamp":1731961039913,"user_tz":480,"elapsed":749121,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"4a9a6172-3b02-4ad4-eae6-a9833239a2c8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 13 of 16\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:49,  6.76s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5795\n","Train ROC: 0.8449\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.08s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 0  test: micro f1: 0.267 macro f1: 0.026 samples f1: 0.268\n","Val mAP: 0.4858\n","Val ROC: 0.7722\n","Train Loss: 0.2365\n","Val Loss: 0.2558\n","Epoch 14 of 16\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:53,  6.95s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5697\n","Train ROC: 0.8406\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:18,  3.77s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 1  test: micro f1: 0.275 macro f1: 0.025 samples f1: 0.277\n","Val mAP: 0.4753\n","Val ROC: 0.7753\n","Train Loss: 0.2401\n","Val Loss: 0.2566\n","Epoch 15 of 16\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:49,  6.78s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5731\n","Train ROC: 0.8413\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.04s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 2  test: micro f1: 0.086 macro f1: 0.014 samples f1: 0.068\n","Val mAP: 0.4903\n","Val ROC: 0.7716\n","Train Loss: 0.2388\n","Val Loss: 0.2555\n","Epoch 16 of 16\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:51,  6.86s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5658\n","Train ROC: 0.8397\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.05s/it]"]},{"output_type":"stream","name":"stdout","text":["epoch: 3  test: micro f1: 0.288 macro f1: 0.028 samples f1: 0.294\n","Val mAP: 0.4882\n","Val ROC: 0.7837\n","Train Loss: 0.2399\n","Val Loss: 0.2572\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["for epoch in range(epochs):\n","    model.to(device)\n","    print(f\"Epoch {epoch+1+16} of {epochs+16}\")\n","    train_epoch_loss,train_epoch_mAP,train_epoch_ROC = train(\n","        model, train_loader, optimizer, criterion, train_data, device\n","    )\n","    valid_epoch_loss,val_epoch_mAP,val_epoch_ROC = validate(\n","        model, valid_loader, criterion, valid_data, device\n","    )\n","    train_loss.append(train_epoch_loss)\n","    valid_loss.append(valid_epoch_loss)\n","    train_mAP.append(train_epoch_mAP)\n","    train_ROC.append(train_epoch_ROC)\n","    valid_mAP.append(val_epoch_mAP)\n","    valid_ROC.append(val_epoch_ROC)\n","    print(f\"Train Loss: {train_epoch_loss:.4f}\")\n","    print(f'Val Loss: {valid_epoch_loss:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_VxBi8iY8NRG","executionInfo":{"status":"ok","timestamp":1731963258993,"user_tz":480,"elapsed":217473,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"056a4dba-c579-47e1-b9e9-bcb332c40285"},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch 17 of 26\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:51,  6.85s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5709\n","Train ROC: 0.8388\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:14,  2.97s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 0  test: micro f1: 0.288 macro f1: 0.028 samples f1: 0.293\n","Val mAP: 0.4832\n","Val ROC: 0.7643\n","Train Loss: 0.2407\n","Val Loss: 0.2641\n","Epoch 18 of 26\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:47,  6.72s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5709\n","Train ROC: 0.8405\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:15,  3.06s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 1  test: micro f1: 0.282 macro f1: 0.025 samples f1: 0.289\n","Val mAP: 0.4986\n","Val ROC: 0.7924\n","Train Loss: 0.2394\n","Val Loss: 0.2592\n","Epoch 19 of 26\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:42,  6.52s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5750\n","Train ROC: 0.8418\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:14,  2.96s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 2  test: micro f1: 0.289 macro f1: 0.028 samples f1: 0.293\n","Val mAP: 0.4904\n","Val ROC: 0.7778\n","Train Loss: 0.2384\n","Val Loss: 0.2575\n","Epoch 20 of 26\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:47,  6.71s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5751\n","Train ROC: 0.8422\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:14,  2.97s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 3  test: micro f1: 0.291 macro f1: 0.029 samples f1: 0.295\n","Val mAP: 0.4820\n","Val ROC: 0.7766\n","Train Loss: 0.2383\n","Val Loss: 0.2631\n","Epoch 21 of 26\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:44,  6.58s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5736\n","Train ROC: 0.8417\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:14,  2.94s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 4  test: micro f1: 0.291 macro f1: 0.029 samples f1: 0.295\n","Val mAP: 0.4845\n","Val ROC: 0.7786\n","Train Loss: 0.2381\n","Val Loss: 0.2630\n","Epoch 22 of 26\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:46,  6.67s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5736\n","Train ROC: 0.8430\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:14,  2.96s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 5  test: micro f1: 0.284 macro f1: 0.026 samples f1: 0.290\n","Val mAP: 0.4832\n","Val ROC: 0.7823\n","Train Loss: 0.2384\n","Val Loss: 0.2576\n","Epoch 23 of 26\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:47,  6.69s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5731\n","Train ROC: 0.8415\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:14,  2.95s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 6  test: micro f1: 0.292 macro f1: 0.034 samples f1: 0.293\n","Val mAP: 0.4958\n","Val ROC: 0.7969\n","Train Loss: 0.2374\n","Val Loss: 0.2482\n","Epoch 24 of 26\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:42,  6.49s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5686\n","Train ROC: 0.8381\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:15,  3.01s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 7  test: micro f1: 0.302 macro f1: 0.034 samples f1: 0.305\n","Val mAP: 0.4896\n","Val ROC: 0.7676\n","Train Loss: 0.2416\n","Val Loss: 0.2622\n","Epoch 25 of 26\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:47,  6.70s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5769\n","Train ROC: 0.8418\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.98s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 8  test: micro f1: 0.287 macro f1: 0.034 samples f1: 0.289\n","Val mAP: 0.5017\n","Val ROC: 0.7875\n","Train Loss: 0.2379\n","Val Loss: 0.2520\n","Epoch 26 of 26\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:47,  6.69s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5780\n","Train ROC: 0.8431\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.99s/it]"]},{"output_type":"stream","name":"stdout","text":["epoch: 9  test: micro f1: 0.302 macro f1: 0.034 samples f1: 0.305\n","Val mAP: 0.4882\n","Val ROC: 0.7661\n","Train Loss: 0.2372\n","Val Loss: 0.2605\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["for epoch in range(epochs):\n","    model.to(device)\n","    print(f\"Epoch {epoch+1+26} of {epochs+26}\")\n","    train_epoch_loss,train_epoch_mAP,train_epoch_ROC = train(\n","        model, train_loader, optimizer, criterion, train_data, device\n","    )\n","    valid_epoch_loss,val_epoch_mAP,val_epoch_ROC = validate(\n","        model, valid_loader, criterion, valid_data, device\n","    )\n","    train_loss.append(train_epoch_loss)\n","    valid_loss.append(valid_epoch_loss)\n","    train_mAP.append(train_epoch_mAP)\n","    train_ROC.append(train_epoch_ROC)\n","    valid_mAP.append(val_epoch_mAP)\n","    valid_ROC.append(val_epoch_ROC)\n","    print(f\"Train Loss: {train_epoch_loss:.4f}\")\n","    print(f'Val Loss: {valid_epoch_loss:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7dpi3ltlEUyl","executionInfo":{"status":"ok","timestamp":1731965318423,"user_tz":480,"elapsed":1817540,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"5506c2f9-3e72-4843-fd67-c6087bab7187"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 27 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:51,  6.85s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5760\n","Train ROC: 0.8411\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.99s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 0  test: micro f1: 0.289 macro f1: 0.028 samples f1: 0.293\n","Val mAP: 0.4835\n","Val ROC: 0.7618\n","Train Loss: 0.2387\n","Val Loss: 0.2663\n","Epoch 28 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:51,  6.84s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5743\n","Train ROC: 0.8422\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.06s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 1  test: micro f1: 0.287 macro f1: 0.027 samples f1: 0.292\n","Val mAP: 0.4832\n","Val ROC: 0.7651\n","Train Loss: 0.2388\n","Val Loss: 0.2640\n","Epoch 29 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:51,  6.87s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5739\n","Train ROC: 0.8425\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.05s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 2  test: micro f1: 0.289 macro f1: 0.031 samples f1: 0.293\n","Val mAP: 0.4779\n","Val ROC: 0.7838\n","Train Loss: 0.2383\n","Val Loss: 0.2563\n","Epoch 30 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:45,  6.60s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5768\n","Train ROC: 0.8445\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.04s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 3  test: micro f1: 0.288 macro f1: 0.028 samples f1: 0.293\n","Val mAP: 0.4913\n","Val ROC: 0.7705\n","Train Loss: 0.2367\n","Val Loss: 0.2610\n","Epoch 31 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:44,  6.57s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5781\n","Train ROC: 0.8427\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.99s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 4  test: micro f1: 0.287 macro f1: 0.028 samples f1: 0.292\n","Val mAP: 0.4812\n","Val ROC: 0.7767\n","Train Loss: 0.2377\n","Val Loss: 0.2664\n","Epoch 32 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:45,  6.61s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5747\n","Train ROC: 0.8424\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.02s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 5  test: micro f1: 0.285 macro f1: 0.027 samples f1: 0.291\n","Val mAP: 0.4978\n","Val ROC: 0.7937\n","Train Loss: 0.2394\n","Val Loss: 0.2552\n","Epoch 33 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:44,  6.58s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5819\n","Train ROC: 0.8437\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.03s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 6  test: micro f1: 0.306 macro f1: 0.035 samples f1: 0.308\n","Val mAP: 0.4827\n","Val ROC: 0.7758\n","Train Loss: 0.2358\n","Val Loss: 0.2619\n","Epoch 34 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:44,  6.59s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5865\n","Train ROC: 0.8503\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.02s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 7  test: micro f1: 0.300 macro f1: 0.033 samples f1: 0.303\n","Val mAP: 0.4888\n","Val ROC: 0.7768\n","Train Loss: 0.2329\n","Val Loss: 0.2576\n","Epoch 35 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:43,  6.55s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5804\n","Train ROC: 0.8441\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.01s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 8  test: micro f1: 0.288 macro f1: 0.028 samples f1: 0.293\n","Val mAP: 0.4820\n","Val ROC: 0.7876\n","Train Loss: 0.2361\n","Val Loss: 0.2572\n","Epoch 36 of 36\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:43,  6.55s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5797\n","Train ROC: 0.8445\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:15,  3.05s/it]"]},{"output_type":"stream","name":"stdout","text":["epoch: 9  test: micro f1: 0.301 macro f1: 0.033 samples f1: 0.303\n","Val mAP: 0.5010\n","Val ROC: 0.7800\n","Train Loss: 0.2360\n","Val Loss: 0.2584\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["for epoch in range(epochs):\n","    model.to(device)\n","    print(f\"Epoch {epoch+1+36} of {epochs+36}\")\n","    train_epoch_loss,train_epoch_mAP,train_epoch_ROC = train(\n","        model, train_loader, optimizer, criterion, train_data, device\n","    )\n","    valid_epoch_loss,val_epoch_mAP,val_epoch_ROC = validate(\n","        model, valid_loader, criterion, valid_data, device\n","    )\n","    train_loss.append(train_epoch_loss)\n","    valid_loss.append(valid_epoch_loss)\n","    train_mAP.append(train_epoch_mAP)\n","    train_ROC.append(train_epoch_ROC)\n","    valid_mAP.append(val_epoch_mAP)\n","    valid_ROC.append(val_epoch_ROC)\n","    print(f\"Train Loss: {train_epoch_loss:.4f}\")\n","    print(f'Val Loss: {valid_epoch_loss:.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DbI8E4DbLqDG","executionInfo":{"status":"ok","timestamp":1731967196422,"user_tz":480,"elapsed":672437,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"f79513c9-b26d-4888-b5ea-00f6aae81ad3"},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch 37 of 46\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:45,  6.63s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5767\n","Train ROC: 0.8436\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:15,  3.04s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 0  test: micro f1: 0.287 macro f1: 0.028 samples f1: 0.292\n","Val mAP: 0.4922\n","Val ROC: 0.7899\n","Train Loss: 0.2363\n","Val Loss: 0.2550\n","Epoch 38 of 46\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:43,  6.55s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5812\n","Train ROC: 0.8468\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:15,  3.02s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 1  test: micro f1: 0.272 macro f1: 0.025 samples f1: 0.273\n","Val mAP: 0.4992\n","Val ROC: 0.7933\n","Train Loss: 0.2356\n","Val Loss: 0.2517\n","Epoch 39 of 46\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:43,  6.56s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5704\n","Train ROC: 0.8393\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:15,  3.14s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 2  test: micro f1: 0.288 macro f1: 0.028 samples f1: 0.293\n","Val mAP: 0.4819\n","Val ROC: 0.7712\n","Train Loss: 0.2403\n","Val Loss: 0.2598\n","Epoch 40 of 46\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:42,  6.51s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5740\n","Train ROC: 0.8423\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:14,  2.97s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 3  test: micro f1: 0.282 macro f1: 0.028 samples f1: 0.287\n","Val mAP: 0.4813\n","Val ROC: 0.7855\n","Train Loss: 0.2381\n","Val Loss: 0.2549\n","Epoch 41 of 46\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:43,  6.53s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5708\n","Train ROC: 0.8393\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:14,  2.97s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 4  test: micro f1: 0.231 macro f1: 0.027 samples f1: 0.214\n","Val mAP: 0.5009\n","Val ROC: 0.7780\n","Train Loss: 0.2396\n","Val Loss: 0.2528\n","Epoch 42 of 46\n","Training\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["25it [02:43,  6.53s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Train mAP: 0.5692\n","Train ROC: 0.8407\n","Validating\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["5it [00:14,  2.94s/it]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["epoch: 5  test: micro f1: 0.281 macro f1: 0.027 samples f1: 0.286\n","Val mAP: 0.4843\n","Val ROC: 0.7880\n","Train Loss: 0.2427\n","Val Loss: 0.2565\n","Epoch 43 of 46\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:41,  6.46s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5780\n","Train ROC: 0.8442\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.94s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 6  test: micro f1: 0.291 macro f1: 0.031 samples f1: 0.294\n","Val mAP: 0.4883\n","Val ROC: 0.7741\n","Train Loss: 0.2374\n","Val Loss: 0.2560\n","Epoch 44 of 46\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:42,  6.49s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5774\n","Train ROC: 0.8427\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.96s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 7  test: micro f1: 0.290 macro f1: 0.033 samples f1: 0.292\n","Val mAP: 0.4902\n","Val ROC: 0.7934\n","Train Loss: 0.2372\n","Val Loss: 0.2506\n","Epoch 45 of 46\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:47,  6.70s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5811\n","Train ROC: 0.8478\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.95s/it]\n"]},{"output_type":"stream","name":"stdout","text":["epoch: 8  test: micro f1: 0.298 macro f1: 0.034 samples f1: 0.300\n","Val mAP: 0.4855\n","Val ROC: 0.7642\n","Train Loss: 0.2354\n","Val Loss: 0.2578\n","Epoch 46 of 46\n","Training\n"]},{"output_type":"stream","name":"stderr","text":["25it [02:43,  6.54s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Train mAP: 0.5791\n","Train ROC: 0.8443\n","Validating\n"]},{"output_type":"stream","name":"stderr","text":["5it [00:14,  2.98s/it]"]},{"output_type":"stream","name":"stdout","text":["epoch: 9  test: micro f1: 0.278 macro f1: 0.033 samples f1: 0.275\n","Val mAP: 0.4725\n","Val ROC: 0.7869\n","Train Loss: 0.2362\n","Val Loss: 0.2619\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["epochs_comp = epochs*3+16\n","epochs_comp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YJDVtZUV7C8y","executionInfo":{"status":"ok","timestamp":1731967303979,"user_tz":480,"elapsed":235,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"c9616e6f-bf21-4cfd-ae0d-eddcccf91765"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["46"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":[" # save the trained model to disk\n"," torch.save({\n","     'epoch': epochs_comp,\n","     'model_state_dict': model.state_dict(),\n","     'optimizer_state_dict': optimizer.state_dict(),\n","     'loss': criterion,\n","                 }, 'model2.pth')"],"metadata":{"id":"w78fO7r5V2fQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# PLOTTONG GRAPHS"],"metadata":{"id":"__uPg8-c5lX1"}},{"cell_type":"code","source":["# plot and save the train and validation line graphs\n","plt.figure(figsize=(10, 7))\n","plt.plot(train_loss, color='orange', label='train loss')\n","plt.plot(valid_loss, color='red', label='validataion loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.savefig('../loss.png')\n","plt.show()"],"metadata":{"id":"Fh3SJzHwvBlT","colab":{"base_uri":"https://localhost:8080/","height":623},"executionInfo":{"status":"ok","timestamp":1731967309438,"user_tz":480,"elapsed":497,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"bd1b4b86-a497-4bc4-9386-523eb994781b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize=(10, 7))\n","plt.plot(train_mAP, color='orange', label='train_mAP')\n","plt.plot(train_ROC, color='red', label='train_ROC')\n","plt.plot(valid_mAP, color='blue',label ='valid_mAP')\n","plt.plot(valid_ROC, color='pink', label='valid_ROC')\n","plt.xlabel('Epochs')\n","plt.ylabel('ACC')\n","plt.legend()\n","plt.savefig('../ACC.png')\n","plt.show()"],"metadata":{"id":"ei_lcFAkvHb-","colab":{"base_uri":"https://localhost:8080/","height":623},"executionInfo":{"status":"ok","timestamp":1731967324331,"user_tz":480,"elapsed":1008,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"f966cb49-e3ec-4f20-99ba-33713b5fc101"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["train_csv = pd.read_csv('train.csv')\n","genres = train_csv.columns.values[2:]\n","# prepare the test dataset and dataloader\n","test_data = ImageDataset(\n","    train_csv, train=False, test=True\n",")\n","test_loader = DataLoader(\n","    test_data,\n","    batch_size=1,\n","    shuffle=False\n",")\n","all_preds = []\n","all_labels = []\n","for counter, data in enumerate(test_loader):\n","    image, target = data['image'].to(device), data['label'].to(device)\n","    # get all the index positions where value == 1\n","    target_indices = [i for i in range(len(target[0])) if target[0][i] == 1]\n","    # get the predictions by passing the image through the model\n","    outputs = model(image)\n","    outputs = torch.sigmoid(outputs)\n","    preds = (outputs > 0.5).float()\n","    outputs = outputs.detach().cpu()\n","    sorted_indices = np.argsort(outputs[0])\n","    best = sorted_indices[-3:]\n","    ########## included later ###############\n","    all_preds.append(preds.cpu().numpy())\n","    all_labels.append(target.cpu().numpy())\n","    #########################################\n","    string_predicted = ''\n","    string_actual = ''\n","    for i in range(len(best)):\n","        string_predicted += f\"{genres[best[i]]}    \"\n","    for i in range(len(target_indices)):\n","        string_actual += f\"{genres[target_indices[i]]}    \"\n","    image = image.squeeze(0)\n","    image = image.detach().cpu().numpy()\n","    image = np.transpose(image, (1, 2, 0))\n","    plt.imshow(image)\n","    plt.axis('off')\n","    plt.title(f\"PREDICTED: {string_predicted}\\nACTUAL: {string_actual}\")\n","    plt.savefig(f\"inference_{counter}.jpg\")\n","    plt.show()\n","\n","\n"],"metadata":{"id":"-s3_7nDnlbTR","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1IZdbbiP-W7QjRBJBL6AX1QI2jbPSLZed"},"executionInfo":{"status":"ok","timestamp":1731967356038,"user_tz":480,"elapsed":10480,"user":{"displayName":"Anurima Saha","userId":"14769126667810262308"}},"outputId":"e5bb3bf0-24a4-46c2-e639-79b82da5d542"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}